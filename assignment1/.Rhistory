scale_y_continuous( '% of seniors in population',
limits = c(0, 50),
breaks = seq(0, 50, 5))
# create a horizontal illustrating the mean percentage of seniors
# set it to the value you have computed above, "meanSeniors"
# YOUR CODE
geom_hline(yintercept = meanSeniors, lty='dashed') +
# the figure already looks quite good, but you can use the "theme" to
# specify some details further, like color of the background etc
# I use it to make the figures correspond more to Tufte's prescriptions
# for good graphics (see https://www.edwardtufte.com/tufte/books_vdqi)
# YOUR CODE
theme(panel.background = element_blank())
# 4. Save it in png format ---------
# - first set the filename and its extension - png
# - then call the png device with this filename and print the figure,
#   you might want to check height, width and resolution parameters
# YOUR CODE
img_path_png <- '/Users/panyiming/r_class/exercises_Rdata/fig/seniorspe.png'
png(filename = img_path_png,
height = 720,
width = 720,
res = 200)
print(figure)
dev.off()
# 5. save it in a PDF format--------
# - do the same as above, but now for pdf format
# tip: use the cairo_pdf device.
# pdf format
# YOUR CODE
img_path_pdf <- '/Users/panyiming/r_class/exercises_Rdata/fig/seniorspe.pdf'
ggsave(img_path_pdf, width = 20, height = 20, units = "cm")
rm(list=ls())
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) {
install.packages("stargazer")
library(stargazer)
}
# Load the data
load('/Users/panyiming/r_class/exercises_Rdata/processed/procData.RData')
labels <- c(
"Stratford-on-Avon" = "Strat. Avon",
"Nuneaton & Bedworth" = "Nun. Bedw.",
"North Warwickshire" = "N. Warwick."
)
for (i in names(labels)) {
aging$District[ which( aging$District == i ) ] <- labels[i]
}
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
stargazer(aging[1:4, 5:8], summary=F, rownames = F,
out = '/Users/panyiming/r_class/exercises_Rdata/tables/dataExploration.tex')
# To compute some summary statistics (it ignores non-numeric columns)
stargazer(aging,
out = '/Users/panyiming/r_class/exercises_Rdata/tables/summaryStats.tex')
# which is equivalent to
functioncomputestats <- function()
apply(aging, 2, functioncomputestats)
# YOUR CODE
summaryStats<- summary(aging)
summaryStats <- round(summaryStats, 3)
# Create a simple regression table with 3 side-by-side models:
# 1. OLS Population (y) on Seniors (x).
# 2. OLS Population (y) on Seniors (x) controlling by Districts
# 3. Logistic regression High Population (y) on Seniors (x) controlling by Districts,
# where High Population = Population > median(Population).
# Create High Population as new column
# YOUR CODE
aging$highpopulation <- aging$Population > median(aging$Population)
# OLS 1:
# YOUR CODE
ols1 <- lm(Population ~ Seniors, data=aging)
# OLS 2:
# YOUR CODE
ols2 <- lm(Population ~ Seniors + District, data=aging)
# Logistic Regression:
# YOUR CODE
lr <- glm(highpopulation ~ Seniors + District, data=aging,
family = binomial(link = 'logit'))
# create tex table and save it in tables/ as regResults.tex.
model_path <- '/Users/panyiming/r_class/exercises_Rdata/tables/regResults.tex'
stargazer(ols1, ols2, lr,
title = "Results", align=TRUE, out=model_path)
# we can also report the content of vectors and matrices.
# For instance, let's create a table that contains the correlation matrix
# for Population, Seniors and PopulationSeniors.
# YOUR CODE
data <- aging[,6:8]
correlation.matrix <- cor(data)
stargazer(correlation.matrix, title = 'Correlation Matrix',
out = '/Users/panyiming/r_class/exercises_Rdata/tables/corMatrix.tex')
# Alternatively, if you do not want to use latex and just see the results in Rstudio,
# you could simply save the objects of interest as an .Rdata file that you can
# retrieve later:
save(summaryStats, ols1, ols2, lr, correlation.matrix,
file = '/Users/panyiming/r_class/exercises_Rdata/tables/tables.Rdata')
summaryStats
correlation.matrix
fit <- lm(mpg ~ wt, data = mtcars)
A1
help('rt')
runner = 100
race = 3
mat2 = matrix(rep(0, runner*race), nrow=runner, ncol=race)
for(i in 1:runner){
for(j in 1:race){
mat[i, j] = rt(df = 5)
}
}
runner = 100
race = 3
mat2 = matrix(rep(0, runner*race), nrow=runner, ncol=race)
for(i in 1:runner){
for(j in 1:race){
mat[i, j] = rt(df = 5, n=1)
}
}
runner = 100
race = 3
mat2 = matrix(rep(0, runner*race), nrow=runner, ncol=race)
for(i in 1:runner){
for(j in 1:race){
mat2[i, j] = rt(df = 5, n=1)
}
}
View(mat2)
View(mat2)
fit
fit <- lm(mpg ~ wt, data = mtcars)
A1 = fit
View(fit)
fit
mode(fit)
list[1]
list[2]
fit.Coefficients
summary(fit)
x = 0
A4 = matrix(rep(0, 100), nrow=100, ncol = 1)
for (i in  1:100){
A4[i, 1] = x
x = 0.5x + rnorm(n=1, mean=0, sd=1)
}
x = 0
A4 = matrix(rep(0, 100), nrow=100, ncol = 1)
for (i in  1:100){
A4[i, 1] = x
x = 0.5x + rnorm(n=1, mean=0, sd=1)
}
A4 = b=runif(100,min=1, max=20)
A4[1]
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
A4[i] = x
x = 0.5x + rnorm(n=1, mean=0, sd=1)
}
A4[i] = 1
for (i in  1:100){
A4[i] = x
x = 0.5x + rnorm(n=1, mean=0, sd=1)
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
A4[i] = x
x = 0.5x + rnorm(n=1, mean=0, sd=1)
}
for (i in  1:100){
A4[i] = x
x = 0.5x + rnorm(n=1, mean=0, sd=1)
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
#A4[i] = x
x = 1
#x = 0.5x + rnorm(n=1, mean=0, sd=1)
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
x = 0.5x + rnorm(n=1, mean=0, sd=1)
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
A4[i] = x
t = rnorm(n=1, mean=0, sd=1)
x = 0.5x + t
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
t = rnorm(n=1, mean=0, sd=1)
x = 0.5x + t
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
t = rnorm(n=1, mean=0, sd=1)
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
t = rnorm(1, mean=0, sd=1)
x = 0.5x + t
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
t = rnorm(1, mean=0, sd=1)
x <- x + 1
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
t = rnorm(1, mean=0, sd=1)
x <- x + t
}
x = 0
A4 = b=runif(100,min=1, max=20)
for (i in  1:100){
t = rnorm(1, mean=0, sd=1)
x <- x + t
A4[i] = x
}
A4
data = read.csv('./Desktop/dataexam/sp500ret.csv')
View(data)
data = read.csv('./Desktop/dataexam/sp500ret.csv')
sort(data, decreasing = T)
View(data)
View(data)
data = read.csv('./Desktop/dataexam/sp500ret.csv')
data = data[order(data$index.r.,)]
data = data[order(data$index.r. , )]
order(data$index.r. , )
data = data[order(data$index.r. , decreasing = T)]
mode(data)
class(data))
class(data)
order(data$index.r. , decreasing = T)
data = data[order(data$index.r. , decreasing = T)]
data = data[order(data$index.r. , decreasing = F)]
data = read.csv('./Desktop/dataexam/sp500ret.csv')
data = data[order(data$index.r. , decreasing = F),]
View(data)
library(readtext)
install.packages(rea"readABF")
install.packages(install.packages(readtext)
)
install.packages('readtext')
data1 = readtext('./Desktop/dataexam/SP500index.txt')
library(readtext)
data1 = readtext('./Desktop/dataexam/SP500index.txt')
data1
View(data1)
View(data1)
data1 = read.table('./Desktop/dataexam/SP500index.txt')
data1
help(diff)
data1['GSPC.Adjusted']
View(data1)
View(data1)
class(ddat1)
class(data1)
data1$V7
rows(data1)
shape(data1)
data1$V7[1:100]
data1$V7[2:100]
len(data1$V70
len(data1$V700
len(data1$V7)
shape(data1$V7)
data1$V7[1:10]
data1$V7[2:10]
log(data1$V7[2:123])
log(exp(3))
as.numeric
log(as.numeric(data1$V7[1:123])
log(as.numeric(data1$V7[1:123]))
x1 = log(as.numeric(data1$V7[2:123]))
x2 = log(as.numeric(data1$V7[3:124]))
A6 = x2 - x1
a = c(1, 2, 3, 4)
mode(a))
mode(a)
my_vector <- 1:5
my_vector[1]
mean = mean(A6)
Mean = apply(A6, 2, mean)
Mean = apply(A6, 1, mean)
Mean = apply(A6, mean)
data3 = as.numeric(A6)
Mean = apply(A6, data3)
Mean = apply(data3, mean)
Mean = apply(data3, 1, mean)
Mean = apply(data3, 2, mean)
Mean = apply(data3, 0, mean)
Mean = apply(data3, 1, mean)
stDev = sd(A6)
stDev
A7 <- 1:4
Mean = mean(A6)
stDev = sd(A6)
Min = min(A6)
Max = max(A6)
A7[1] = mean
A7[2] = stDev
A7[3] = Min
A7[4] = Max
View(data)
View(data)
fit['Coefficients']
fit$coefficients
a =fit$coefficients
a
a =fit$coefficients
a
class(a)
size(a)
A1 = fit$coefficients
A1
row(A1)
shape(A1)
nrow(A1)
nrow(A2)
mode(A1))
mode(A1)
matrix(A1)
A1 = matrix(fit$coefficients)
size(A1)
nrow(A1)
nrow(A2)
ncol(A1)
2^0.5
1/2
exp(1)
BS <- function(S, K, M, c, Sigma, Rf){
d1 <- 1. / (M^0.5 * S) * (log(S/K)+(Rf+ Sigma^2/2.0) * M)
d2 <- d1 - sigma * M^0.5
C <- pnorm(d1) * S - pnorm(d2) * K *  exp(-Rf * M)
}
BS <- function(S, K, M, c, Sigma, Rf){
d1 <- 1. / (M^0.5 * S) * (log(S/K)+(Rf+ Sigma^2/2.0) * M)
d2 <- d1 - sigma * M^0.5
C <- pnorm(d1) * S - pnorm(d2) * K *  exp(-Rf * M)
return(C)
}
function(1, 2,3,4,5,6)
BS(1, 2,3,4,5,6)
BS <- function(S, K, M, c, Sigma, Rf){
d1 <- 1. / ( M^0.5 * S) * (log(S/K)+(Rf+ Sigma^2/2.0) * M)
d2 <- d1 - Sigma * M^0.5
C <- pnorm(d1) * S - pnorm(d2) * K *  exp(-Rf * M)
return(C)
}
BS(1, 2,3,4,5,6)
a1 = {80, 90, 100, 110, 120}
S = 100
r = 0
Sigma = 1.
b1 = c(10/360, 60/360, 110/360, 160/360, 210/360, 260/360, 310/360, 1)
a1 = c(80, 90, 100, 110, 120)
A10 = matrix(rep(0, runner*race), nrow=5, ncol=8)
for(i in 1:5){
for (j in 1:8)
{
A10[i, j] = BS(S, b1[j], a1[i], 1, 0)
}
}
BS <- function(S, K, M, Sigma, Rf){
d1 <- 1. / ( M^0.5 * Sigma) * (log(S/K)+(Rf+ Sigma^2/2.0) * M)
d2 <- d1 - Sigma * M^0.5
C <- pnorm(d1) * S - pnorm(d2) * K *  exp(-Rf * M)
return(C)
}
# problem 10
# Suppose that
S = 100
r = 0
Sigma = 1.
b1 = c(10/360, 60/360, 110/360, 160/360, 210/360, 260/360, 310/360, 1)
a1 = c(80, 90, 100, 110, 120)
A10 = matrix(rep(0, runner*race), nrow=5, ncol=8)
for(i in 1:5){
for (j in 1:8)
{
A10[i, j] = BS(S, b1[j], a1[i], 1, 0)
}
}
View(A10)
S = 100
r = 0
Sigma = 1.
b1 = c(10/360, 60/360, 110/360, 160/360, 210/360, 260/360, 310/360, 1)
a1 = c(80, 90, 100, 110, 120)
A10 = matrix(rep(0, runner*race), nrow=5, ncol=8)
for(i in 1:5){
for (j in 1:8)
{
A10[i, j] = BS(S, b1[j], a1[i], 0, 1)
}
}
View(A10)
View(A10)
house_price <- read.csv(file = './assignment1/data_problemset1/')
house_price <- read.csv(file = 'data_problemset1/')
house_price <- read.csv(file = 'data_problemset1/Housing_Prices.csv')
rm(list = ls())
setwd("Desktop/courses_term1/econometrics/problem_sets/assignment1/")
house_price <- read.csv(file = './data_problemset1/Housing_Prices.csv')
house_price <- read.csv(file = './data_problemset1/Housing_Prices.csv')
house_price <- read.csv(file = './data_problemset1/Housing_Prices.csv')
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms)
house_price <- read.csv(file = './data_problemset1/Housing_Prices.csv')
lm(house_price$Price..euros.~house_price$City.Zone+house_price$m.2+house_price$Rooms)
house_price <- read.csv(file = './data_problemset1/Housing_Prices.csv')
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+\
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+\
house_price$Terrasse+house_price$Parking+house_price$Parking+\
house_price$Kitchen+house_price$House.Style+house_price$Yard)
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+\
house_price$Terrasse+house_price$Parking+house_price$Parking+\
house_price$Kitchen+house_price$House.Style+house_price$Yard)
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
coeftest(model1, rob.se1)
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
library(car)
coeftest(model1, rob.se1)
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
smmary(model1)
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
summary(model1)
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
summary(model1)
lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
summary(model1)
clc
clc
cl
View(house_price)
rm(list = ls())
setwd("Desktop/courses_term1/econometrics/problem_sets/assignment1/")
house_price <- read.csv(file = './data_problemset1/Housing_Prices.csv')
model1 = lm(house_price$Price..euros.~house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
summary(model1)
lm(house_price$Price..euros.~house_price$Ones+house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
View(house_price)
View(model1)
View(house_price)
rm(list = ls())
lm(house_price$Price..euros.~house_price$+house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
lm(house_price$Price..euros.~house_price$+house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
house_price <- read.csv(file = './data_problemset1/Housing_Prices1.csv')
house_price <- read.csv(file = './data_problemset1/Housing_Prices1.csv')
house_price <- read.csv(file = './data_problemset1/Housing_Prices1.csv')
model1 = lm(house_price$Price..euros.~house_price$Ones+house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
summary(model1)
house_price <- read.csv(file = './data_problemset1/Housing_Prices1.csv')
model1 = lm(house_price$Price..euros.~house_price$Ones+house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
summary(model1)
model1 = lm(house_price$Price..euros.~house_price$City.Zone+house_price$m.2+house_price$Rooms+
house_price$Bathrooms+house_price$Elevator+house_price$X.Atico.+
house_price$Terrasse+house_price$Parking+house_price$Parking+
house_price$Kitchen+house_price$House.Style+house_price$Yard)
summary(model1)
View(model1)
View(model1)
